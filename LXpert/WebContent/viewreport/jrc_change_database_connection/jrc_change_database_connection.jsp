
<%
/* 
 * Applies to versions:	XI Release 2
 * Date Created: December 2005
 * Description: This sample demonstrates how to change the database that a report uses at runtime in the JRC.
 * 				NOTES: To help determine what connection properties need to be changed at runtime through code, create
 * 				a copy of your original report and use the Crystal Reports designer to change this report to new datasource
 * 				manually.  Then use the jrc_display_connection_info helper sample to compare the connection information 
 * 				between the original report and the copy of that report pointing at the new datasource.  
 * 				The connection information properties from the output generated by the jrc_display_connection_info 
 * 				sample that are different in the report pointing at the new datasource from the original can 
 * 				then be set through code to help ensure that the database connection properties are changed correctly. 
 * Author: CW.
 */
%>

<%@ page contentType="text/html"%>
<%@ page pageEncoding="UTF-8"%>

<%//Crystal Java Reporting Component (JRC) imports.%>
<%@ page import="com.crystaldecisions.reports.sdk.*"%>
<%@ page import="com.crystaldecisions.sdk.occa.report.lib.*"%>
<%@ page import="com.crystaldecisions.sdk.occa.report.data.*"%>

<%
//Report can be opened from the relative location specified in the CRConfig.xml, or the report location
//tag can be removed to open the reports as Java resources or using an absolute path (absolute path not recommended
//for Web applications).
final String REPORT_NAME = "/viewreport/jrc_change_database_connection/jrc_change_database_connection.rpt";
%>

<%

try {
	
	//Open report.
	ReportClientDocument reportClientDoc = new ReportClientDocument();
	reportClientDoc.open(REPORT_NAME, 0);

	//The DatabaseController will be used to modify the connection properties of the database before 
	//viewing the report.  This method iterates through each table in the report and changes the 
	//connection info properties.  
			
	//Switch all tables on the main report.  See utility method below.
	switch_tables(reportClientDoc.getDatabaseController());
			
	//Perform the same operation against all tables in the subreport as well.
	IStrings subreportNames = reportClientDoc.getSubreportController().getSubreportNames();
			
	//Set the datasource for all the subreports.
	for (int i = 0; i < subreportNames.size(); i++ ) {
		ISubreportClientDocument subreportClientDoc = reportClientDoc.getSubreportController().getSubreport(subreportNames.getString(i));
				
		//Switch tables for each subreport in the report using the same connection information.  See utility
		//method below.
		switch_tables(subreportClientDoc.getDatabaseController());
								
	}	
	
	//Store the report source in session, will be used by the CrystalReportViewer.
	session.setAttribute("reportSource", reportClientDoc.getReportSource());
							
	//Launch CrystalReportViewer page that contains the report viewer.
	response.sendRedirect("CrystalReportViewer.jsp");
		
}
catch(ReportSDKException ex) {	
	out.println(ex);
}
catch(Exception ex) {
	out.println(ex);			
}
%>

<%!
   /**
 	* Sample utility method for switching the database connection properties of all tables accessible from a databaseController 
 	* (i.e., could be a main report database controller, or a subreport's database controller) from one database to another. 
 	*/ 
	private static void switch_tables(DatabaseController databaseController) throws ReportSDKException {

		//Declare the new connection properties that report's datasource will be switched to.
		//NOTE: These are specific to using JDBC against a particular MS SQL Server database.  Be sure to use the 
		//DisplayConnectionInfo sample to determine what your own connection properties need to be set to.
		final String TABLE_NAME_QUALIFIER = "xtreme.dbo.";
		final String DBUSERNAME = "devtech";
		final String DBPASSWORD = "devtech";
		final String SERVERNAME = "vancsdb02.crystald.net"; 
		final String CONNECTION_STRING = "Use JDBC=b(true);Connection URL=s(jdbc:microsoft:sqlserver://vancsdb02.crystald.net:1433);" + 
										 "Database Class Name=s(com.microsoft.jdbc.sqlserver.SQLServerDriver);Server=s(vancsdb02.crystald.net);" + 
										 "User ID=s(vantech);Password=;Database=s(Xtreme1);Trusted_Connection=b(false);" + 
										 "JDBC Connection String=s(!com.microsoft.jdbc.sqlserver.SQLServerDriver!jdbc:microsoft:sqlserver://vancsdb02.crystald.net:1433;" + 
										 "DatabaseName={database};user={userid};password={password}!)";
		final String DATABASE_NAME = "Xtreme";
		final String URI = "!com.microsoft.jdbc.sqlserver.SQLServerDriver!jdbc:microsoft:sqlserver://vancsdb02.crystald.net:1433;DatabaseName={database};user={userid};password={password}!";
		final String DATABASE_DLL = "crdb_jdbc.dll";
		
		//Obtain collection of tables from this database controller.
		Tables tables = databaseController.getDatabase().getTables();

		//Set the datasource for all main report tables.
		for (int i = 0; i < tables.size(); i++) {

			ITable table = tables.getTable(i);

			//Keep existing name and alias.
			table.setName(table.getName());
			table.setAlias(table.getAlias());
							
			//Change properties that are different from the original datasource.
			table.setQualifiedName(TABLE_NAME_QUALIFIER + table.getName());
			
			//Change connection information properties.
			IConnectionInfo connectionInfo = table.getConnectionInfo();
							
			//Set new table connection property attributes.
			PropertyBag propertyBag = new PropertyBag();
			
			//Overwrite any existing properties with updated values.
			propertyBag.put("Trusted_Connection", "false");
			propertyBag.put("Server Name", SERVERNAME); //Optional property.
			propertyBag.put("Connection String", CONNECTION_STRING);
			propertyBag.put("Database Name", DATABASE_NAME);
			propertyBag.put("Server Type", "JDBC (JNDI)");
			propertyBag.put("URI", URI);
			propertyBag.put("Use JDBC", "true");
			propertyBag.put("Database DLL", DATABASE_DLL);
					
			connectionInfo.setAttributes(propertyBag);
			
			//Set database username and password.
			//NOTE: Even if these the username and password properties don't change when switching databases, the 
			//database password is *not* saved in the report and must be set at runtime if the database is secured.  
			connectionInfo.setUserName(DBUSERNAME);
			connectionInfo.setPassword(DBPASSWORD);
			connectionInfo.setKind(ConnectionInfoKind.SQL);
							
			table.setConnectionInfo(connectionInfo);
			
			//Update old table in the report with the new table.
			databaseController.setTableLocation(table, tables.getTable(i));
			
		}
				
	}
	
%>
